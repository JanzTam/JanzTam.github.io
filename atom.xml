<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tangjz&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tangjz.cc/"/>
  <updated>2019-12-16T02:45:09.533Z</updated>
  <id>http://tangjz.cc/</id>
  
  <author>
    <name>唐健焯</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次电脑主机组装</title>
    <link href="http://tangjz.cc/2019/12/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%94%B5%E8%84%91%E4%B8%BB%E6%9C%BA%E7%BB%84%E8%A3%85/"/>
    <id>http://tangjz.cc/2019/12/15/记一次电脑主机组装/</id>
    <published>2019-12-15T14:43:53.000Z</published>
    <updated>2019-12-16T02:45:09.533Z</updated>
    
    <content type="html"><![CDATA[<p>记自己动手更换了 MBP 电池、MBP无线模块、iPhone 电池之后，又来挑战 DIY 主机。</p><a id="more"></a><h1 id="确定自己的场景需求"><a href="#确定自己的场景需求" class="headerlink" title="确定自己的场景需求"></a>确定自己的场景需求</h1><p>首先，配置主机之前必须得清楚自己的需求，不然到时候发现不合适，退换货就麻烦了。办公、设计、视频编辑、黑苹果、写代码等，不同的使用场景，配置也相应的不一样。</p><p><strong>按价格排序</strong></p><p>办公 &lt; 设计 &lt; 写代码 &lt; 游戏 &lt; 视频编辑</p><p>设计的价格主要体现在显示器上。视频编辑则对 CPU 单核处理性能和显卡的要求更高。因此，得十分明确自己的需求。当然，不差钱的话，可以直接一切往高端走，不需犹豫挑这挑那的。</p><h1 id="基本硬件要求"><a href="#基本硬件要求" class="headerlink" title="基本硬件要求"></a>基本硬件要求</h1><p>除了基本的输出设备（键盘、鼠标、显示器、音箱）之外，以下仅针对主机。</p><ul><li>CPU</li><li>主板</li><li>内存条</li><li>硬盘</li><li>电源</li><li>CPU 散热器 </li><li>显卡（可选）</li><li>机箱</li></ul><p>显卡为啥说可选，如果您只是办公使用，一个带显的 CPU  完全能满足需求，没必要再上显卡。</p><h1 id="硬件说明"><a href="#硬件说明" class="headerlink" title="硬件说明"></a>硬件说明</h1><p>选择时，建议按此处顺序配置自己所需的硬件。</p><h3 id="1、CPU"><a href="#1、CPU" class="headerlink" title="1、CPU"></a>1、CPU</h3><p>目前熟知的，主要是 Inter 英特尔 和 AMD。</p><p>选超频，不解释。</p><p>游戏、黑苹果，推荐上英特尔。i7 9700、i9 9900，可看自己的钱包选择。</p><p>其余的话可选择 AMD。</p><h3 id="2、CPU-散热器"><a href="#2、CPU-散热器" class="headerlink" title="2、CPU 散热器"></a>2、CPU 散热器</h3><p>散热器又分水冷和风冷。</p><p>水冷的优点：散热效果好、占用机箱体积小、装逼效果 Max。缺点：价格贵</p><p>风冷的优点：散热效果其实和水冷差不多，同样的价格更建议上水冷，比水冷要便宜得多。缺点：占用机箱体积。</p><p>不缺钱真的建议上个水冷，我因穷，上了个6热管的大霜塔，挡住了好几个内存条的卡槽，可烦人了。</p><h3 id="3、内存条"><a href="#3、内存条" class="headerlink" title="3、内存条"></a>3、内存条</h3><p>除了办公之外，基本都得上16G+了。目前主要还是DDR4，DDR5估计得到2020年之后才能普及。</p><p>频率建议在自己的接受价格范围内越高越好。至于品牌，个人感觉差异不大。</p><p>上套条上套条上套条！重要的话说三遍！即相同牌子、频率、大小。</p><h3 id="4、硬盘"><a href="#4、硬盘" class="headerlink" title="4、硬盘"></a>4、硬盘</h3><p>一般来说，建议 1 个 200 G 的 SSD + 1 个大容量的机械硬盘。要是黑苹果的话，建议 2 个 SSD + 1 个机械硬盘，1个 SSD 装 Window 系统、另一个装 Mac 系统。</p><p>SSD 建议选 M.2 口的。</p><p>黑苹果建议上 Inter 760P系列的。</p><p>机械硬盘选 7200 转的。希捷、西数都可以。</p><h3 id="5、显卡"><a href="#5、显卡" class="headerlink" title="5、显卡"></a>5、显卡</h3><p>要是只需核显的话，可跳过。</p><p>黑苹果必须得上 A 卡，A 卡中又以蓝宝石为王。建议RX590</p><p>其它，看自己钱包选择。</p><h3 id="6、主板"><a href="#6、主板" class="headerlink" title="6、主板"></a>6、主板</h3><p>主板之中，主要以技嘉、微星、华硕为主。这之中挑自己喜欢的就好。</p><p>看回上面的1～5，必须得注意想要买的主板：</p><ul><li>是否支持超频？</li><li>带多少个内存条卡槽？</li><li>带多少个SSD M.2卡槽？（建议2个及以上）</li><li>最高支持内存条的频率是多少？</li><li>PCI-E接口多少？（显卡和无线网卡的卡槽，建议2个以上）</li><li>是否带外显 Type-C 接口？（只需核显的话，只有 Type-C 才支持 4K 60hz，HDMI只支持 4K 30hz）</li></ul><h3 id="7、-电源"><a href="#7、-电源" class="headerlink" title="7、 电源"></a>7、 电源</h3><p>一般建议600W以上。高端的 CPU 和显卡，则建议 750W 以上。具体看硬件，尽量买高点w数的。</p><p>牌子建议选择先马。</p><p>现在高端主板 CPU 都是 8 + 4 pin的，显卡8+6、8+8等等都有，要看清自己需要的再买。</p><h3 id="8、机箱"><a href="#8、机箱" class="headerlink" title="8、机箱"></a>8、机箱</h3><p>选择的时候注意自己的主板是 ITX 的还是啥的！谨记啊老铁们！</p><p>其它注意事项：</p><ul><li>显卡长度限制</li><li>散热器高度限制</li><li>是否有水冷风扇位</li><li>建议前置带 Type-C 接口</li></ul><h1 id="最终选择"><a href="#最终选择" class="headerlink" title="最终选择"></a>最终选择</h1><p>我主要需求是黑苹果，分享下我的配置：</p><ul><li>CPU：i7 9700K</li><li>CPU 散热：风冷，大霜塔</li><li>内存条：芝奇 DDR4 3600 8G * 2</li><li>硬盘：东芝 SSD M.2 500G *2、希捷 2T 高速</li><li>显卡：蓝宝石 RX 590 8G</li><li>主板：技嘉 Z390 Aorus Pro WiFi</li><li>电源：先马 750W</li><li>机箱：先马鲁班1</li></ul><h1 id="动手组装"><a href="#动手组装" class="headerlink" title="动手组装"></a>动手组装</h1><p>组装之前，建议测试过点亮了之后再装上机箱！！！</p><p><em>安装前注意事项！！！</em></p><ul><li><p>新手安装每一样硬件，记得认真看说明书！</p></li><li><p>看准机箱螺丝类型，按类安装。</p></li><li><p>固定主板螺丝千万要温柔，不能紧。血的教训。呜呜呜</p></li><li><p>要涂膏的都先别涂，确定能点亮了再涂。避免影响退换货。</p></li><li><p>风扇通道。前进风，顶部、后面出风</p></li><li><p>电源线都有卡位，不能强拔，以免弄坏主板</p></li><li><p>插入多个 M.2，有些 SATA 接口会被占用，插入机械硬盘的时候稍微注意下</p></li></ul><p>按顺序装上</p><ol><li>CPU（先别涂散热膏，以免出现问题，影响退货）</li><li>内存条</li><li>散热器（同样，先别涂散热膏，以免出现问题，影响退货）</li><li>显卡（有核显可先不装）</li><li>硬盘</li><li>电源</li></ol><p>使用螺丝刀连接跳线来点亮（开机）。</p><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>基本流程就这样。Enjoy～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记自己动手更换了 MBP 电池、MBP无线模块、iPhone 电池之后，又来挑战 DIY 主机。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://tangjz.cc/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="DIY" scheme="http://tangjz.cc/categories/%E7%94%9F%E6%B4%BB/DIY/"/>
    
    
      <category term="组装主机" scheme="http://tangjz.cc/tags/%E7%BB%84%E8%A3%85%E4%B8%BB%E6%9C%BA/"/>
    
      <category term="DIY" scheme="http://tangjz.cc/tags/DIY/"/>
    
      <category term="Hackintosh主机" scheme="http://tangjz.cc/tags/Hackintosh%E4%B8%BB%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Failed to connect to GitHub to update...</title>
    <link href="http://tangjz.cc/2018/11/01/Failed-to-connect-to-GitHub-to-update/"/>
    <id>http://tangjz.cc/2018/11/01/Failed-to-connect-to-GitHub-to-update/</id>
    <published>2018-11-01T08:18:29.000Z</published>
    <updated>2018-11-01T08:53:11.395Z</updated>
    
    <content type="html"><![CDATA[<p>更新 Cocoapods 本地索引，报错了：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ pod repo update</span><br><span class="line">Updating spec repo `master`</span><br><span class="line">[!] Failed to connect to GitHub to update the CocoaPods/Specs specs repo </span><br><span class="line">- Please check if you are offline, or that GitHub is down</span><br></pre></td></tr></table></figure><p>谷歌了不少解决方案，尝试过更新 openssl,  ruby,  cocoapod，还是不行。</p><p>过了许久，突然找到了解决方案。原来是终端代理的问题。将终端代理临时去掉，就可以了！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在 .bashrc 或者 .zshrc 里 将终端代理注释掉</span><br><span class="line">#export http_proxy=&quot;socks5://0.0.0.0:8889&quot;</span><br><span class="line">#export https_proxy=&quot;socks5://0.0.0.0:8889&quot;</span><br></pre></td></tr></table></figure><p>再试试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pod repo update</span><br></pre></td></tr></table></figure><p>现在应该就可以了～</p><p>我在使用 Carthage 配置第三方库的时候也遇到类似的问题，也是如此解决～</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Falling back to building from the source</span><br><span class="line">***  Skipped installing NEKit.framework binary due to the error:</span><br><span class="line">&quot;GitHub API request failed: networkError(Error Domain=NSURLErrorDomain Code=-1005 &quot;The network connection was lost.&quot; </span><br><span class="line">UserInfo=&#123;NSUnderlyingError=0x7fb3a2f3c980 &#123;Error Domain=kCFErrorDomainCFNetwork Code=-1005 &quot;(null)&quot; </span><br><span class="line">UserInfo=&#123;_kCFStreamErrorCodeKey=-4, _kCFStreamErrorDomainKey=4&#125;&#125;, </span><br><span class="line">NSErrorFailingURLStringKey=https://api.github.com/repos/zhuhaow/NEKit/releases/tags/0.13.0?, </span><br><span class="line">NSErrorFailingURLKey=https://api.github.com/repos/zhuhaow/NEKit/releases/tags/0.13.0?, </span><br><span class="line">_kCFStreamErrorDomainKey=4, _kCFStreamErrorCodeKey=-4, NSLocalizedDescription=The network connection was lost.&#125;)&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;更新 Cocoapods 本地索引，报错了：&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="http://tangjz.cc/categories/%E5%BC%80%E5%8F%91/"/>
    
      <category term="iOS" scheme="http://tangjz.cc/categories/%E5%BC%80%E5%8F%91/iOS/"/>
    
    
      <category term="iOS" scheme="http://tangjz.cc/tags/iOS/"/>
    
      <category term="Cocoapods" scheme="http://tangjz.cc/tags/Cocoapods/"/>
    
      <category term="iTerms" scheme="http://tangjz.cc/tags/iTerms/"/>
    
      <category term="Carthage" scheme="http://tangjz.cc/tags/Carthage/"/>
    
  </entry>
  
  <entry>
    <title>Golang 笔记</title>
    <link href="http://tangjz.cc/2018/04/20/Golang-%E7%AC%94%E8%AE%B0/"/>
    <id>http://tangjz.cc/2018/04/20/Golang-笔记/</id>
    <published>2018-04-20T09:55:57.000Z</published>
    <updated>2018-04-27T10:36:31.847Z</updated>
    
    <content type="html"><![CDATA[<p>在选 JAVA 和 Golang 之间选一门后端语言纠结了好久，最后选择了 Golang 。看了2天语法，感觉和 Swift 有点像，对熟悉 swift 的开发者来说，应该十分容易上手。</p><p>在此记录一下学习 Golang 过程中的笔记。</p><a id="more"></a><h5 id="1-时间格式"><a href="#1-时间格式" class="headerlink" title="1.时间格式"></a>1.时间格式</h5><p>必须精确地限定到 golang 指定的时间原点：<code>2006-01-02 15:04:05</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(time.Now().Format(<span class="string">"2006-01-02 15:04:05"</span>))</span><br></pre></td></tr></table></figure><h5 id="2-fmt-Println-，多个结果，都返回了才会打印"><a href="#2-fmt-Println-，多个结果，都返回了才会打印" class="headerlink" title="2.  fmt.Println()，多个结果，都返回了才会打印"></a>2.  <code>fmt.Println()</code>，多个结果，都返回了才会打印</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pow</span><span class="params">(x, n, lim <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> v := math.Pow(x, n); v &lt; lim &#123;</span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(v) <span class="comment">//1先打印</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lim</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(</span><br><span class="line">pow(<span class="number">3</span>, <span class="number">2</span>, <span class="number">10</span>), <span class="comment">//2</span></span><br><span class="line">pow(<span class="number">3</span>, <span class="number">3</span>, <span class="number">20</span>), <span class="comment">//3</span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-defer-栈"><a href="#3-defer-栈" class="headerlink" title="3. defer 栈"></a>3. defer 栈</h5><p>推迟的函数调用会被压入一个栈中。当外层函数返回时，被推迟的函数会按照后进先出的顺序调用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"done"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果：done 9 8 7 6 5 4 3 2 1</span></span><br></pre></td></tr></table></figure><h5 id="4-指针"><a href="#4-指针" class="headerlink" title="4. 指针"></a>4. 指针</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">i, j := <span class="number">42</span>, <span class="number">2701</span></span><br><span class="line"></span><br><span class="line">p := &amp;i         <span class="comment">// point to i</span></span><br><span class="line">fmt.Println(*p) <span class="comment">// read i through the pointer</span></span><br><span class="line">*p = <span class="number">21</span>         <span class="comment">// set i through the pointer</span></span><br><span class="line">fmt.Println(i)  <span class="comment">// see the new value of i</span></span><br><span class="line"></span><br><span class="line">p = &amp;j         <span class="comment">// point to j</span></span><br><span class="line">*p = *p / <span class="number">37</span>   <span class="comment">// divide j through the pointer</span></span><br><span class="line">fmt.Println(j) <span class="comment">// see the new value of j</span></span><br></pre></td></tr></table></figure><h5 id="5-指针接收者声明方法"><a href="#5-指针接收者声明方法" class="headerlink" title="5. 指针接收者声明方法"></a>5. 指针接收者声明方法</h5><p>方法使用值接收者，那么方法会对原始值的副本进行操作。（对于函数的其它参数也是如此。）如果想修改它的接收者，可以使用指针接收者。</p><p>而以值为接收者的方法被调用时，接收者既能为值又能为指针：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> v Vertex</span><br><span class="line">fmt.Println(v.Abs()) <span class="comment">// OK</span></span><br><span class="line">p := &amp;v</span><br><span class="line">fmt.Println(p.Abs()) <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><h5 id="6-接口"><a href="#6-接口" class="headerlink" title="6. 接口"></a>6. 接口</h5><ul><li>可以通过接口的特点来实现范型</li><li>空接口被用来处理未知类型的值</li></ul><h5 id="7-Stringer"><a href="#7-Stringer" class="headerlink" title="7. Stringer"></a>7. Stringer</h5><p>fmt 包中定义的 Stringer 是最普遍的接口之一。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Stringer <span class="keyword">interface</span> &#123;</span><br><span class="line">    String() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Stringer 是一个可以用字符串描述自己的类型。fmt 包（还有很多包）都通过此接口来打印值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"%v (%v years)"</span>, p.Name, p.Age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := Person&#123;<span class="string">"Arthur Dent"</span>, <span class="number">42</span>&#125;</span><br><span class="line">z := Person&#123;<span class="string">"Zaphod Beeblebrox"</span>, <span class="number">9001</span>&#125;</span><br><span class="line">fmt.Println(a, z)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-利用sync-WaitGroup实现协程同步"><a href="#8-利用sync-WaitGroup实现协程同步" class="headerlink" title="8.利用sync.WaitGroup实现协程同步"></a>8.利用sync.WaitGroup实现协程同步</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SafeCounter <span class="keyword">struct</span> &#123;</span><br><span class="line">v <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></span><br><span class="line">mux sync.Mutex <span class="comment">//互斥锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *SafeCounter)</span> <span class="title">Inc</span><span class="params">(key <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">c.mux.Lock()</span><br><span class="line">c.v[key]++</span><br><span class="line">c.mux.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *SafeCounter)</span> <span class="title">Value</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">c.mux.Lock()</span><br><span class="line"><span class="keyword">defer</span> c.mux.Unlock()</span><br><span class="line"><span class="keyword">return</span> c.v[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(time.Now())</span><br><span class="line">c := SafeCounter&#123;<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>), sync.Mutex&#123;&#125;&#125;</span><br><span class="line"><span class="keyword">var</span> wait = sync.WaitGroup&#123;&#125;</span><br><span class="line">wait.Add(<span class="number">1000</span>) <span class="comment">//1000表示活动的协程个数</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">c.Inc(<span class="string">"someKey"</span>)</span><br><span class="line">wait.Done() <span class="comment">// 操作完成，减少一个计数</span></span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//time.Sleep(time.Second)</span></span><br><span class="line">wait.Wait()</span><br><span class="line">fmt.Println(c.Value(<span class="string">"someKey"</span>))</span><br><span class="line">fmt.Println(time.Now())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p>1.<a href="https://tour.go-zh.org/flowcontrol/8" target="_blank" rel="noopener">循环与函数</a> ，实现一个平方根函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sqrt</span><span class="params">(x <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> E = <span class="number">0.000001</span></span><br><span class="line">z := <span class="keyword">float64</span>(<span class="number">1</span>)  <span class="comment">//注意float型</span></span><br><span class="line">k := <span class="keyword">float64</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> ; ; z = z - (z*z - x) / (<span class="number">2</span>*z) &#123;</span><br><span class="line"><span class="keyword">if</span> z - k &lt;= E &amp;&amp; z - k &gt;= -E &#123;</span><br><span class="line"><span class="keyword">return</span> z</span><br><span class="line">&#125;</span><br><span class="line">k = z</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.实现一个 Reader 类型，它产生一个 ASCII 字符 ‘A’ 的无限流。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyReader <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *MyReader)</span> <span class="title">Read</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">b[<span class="number">0</span>] = <span class="string">'A'</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.图像</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"golang.org/x/tour/pic"</span></span><br><span class="line">    <span class="string">"image"</span></span><br><span class="line">    <span class="string">"image/color"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Image <span class="keyword">struct</span>&#123;</span><br><span class="line">    w <span class="keyword">int</span></span><br><span class="line">    h <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self Image)</span> <span class="title">ColorModel</span><span class="params">()</span> <span class="title">color</span>.<span class="title">Model</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> color.RGBAModel</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self Image)</span> <span class="title">Bounds</span><span class="params">()</span> <span class="title">image</span>.<span class="title">Rectangle</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> image.Rect(<span class="number">0</span>, <span class="number">0</span>, self.w, self.h)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self Image)</span> <span class="title">At</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">color</span>.<span class="title">Color</span></span> &#123;</span><br><span class="line">    r := (<span class="keyword">uint8</span>)((<span class="keyword">float64</span>)(x) / (<span class="keyword">float64</span>)(self.w) * <span class="number">255.0</span>)</span><br><span class="line">    g := (<span class="keyword">uint8</span>)((<span class="keyword">float64</span>)(y) / (<span class="keyword">float64</span>)(self.h) * <span class="number">255.0</span>)</span><br><span class="line">    b := (<span class="keyword">uint8</span>)((<span class="keyword">float64</span>)(x * y) / (<span class="keyword">float64</span>)(self.w * self.h) * <span class="number">255.0</span>)</span><br><span class="line">    <span class="keyword">return</span> color.RGBA&#123;r, g, b, <span class="number">255</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := Image&#123;<span class="number">350</span>, <span class="number">350</span>&#125;</span><br><span class="line">pic.ShowImage(m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在选 JAVA 和 Golang 之间选一门后端语言纠结了好久，最后选择了 Golang 。看了2天语法，感觉和 Swift 有点像，对熟悉 swift 的开发者来说，应该十分容易上手。&lt;/p&gt;
&lt;p&gt;在此记录一下学习 Golang 过程中的笔记。&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="http://tangjz.cc/categories/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Golang" scheme="http://tangjz.cc/categories/%E5%BC%80%E5%8F%91/Golang/"/>
    
    
      <category term="Golang" scheme="http://tangjz.cc/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>我常用的 Mac 开发工具和应用</title>
    <link href="http://tangjz.cc/2018/04/18/%E6%88%91%E5%B8%B8%E7%94%A8%E7%9A%84-Mac-%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%92%8C%E5%BA%94%E7%94%A8/"/>
    <id>http://tangjz.cc/2018/04/18/我常用的-Mac-开发工具和应用/</id>
    <published>2018-04-18T11:08:39.000Z</published>
    <updated>2018-11-01T08:51:18.033Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下个人使用 Mac OS 系统过程中常用的工具和应用<br><a id="more"></a></p><h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><p><strong>Chrome</strong>：开发必备了吧，配合各种插件</p><p><strong>Navicat Premium</strong>：支持多种数据库，开发必备</p><p><strong>Paw</strong>：API调试工具</p><p><strong>PostMan</strong>：API调试工具</p><p><strong>Dash</strong>：各种开发文档合集</p><p><strong>PaintCode</strong>：支持通过 svg 生成 iOS 和 Android 代码</p><p><strong>Sublime Text</strong>：支持多种编程语言的编译器</p><p><strong>Sourcetree</strong>：Git 可视化应用</p><p><strong>CornerStone</strong>：SVN 可视化应用</p><p><strong>HBuilder</strong>：前端IDE，支持本地部署</p><p><strong>WebStorm</strong>：前端IDE</p><p><strong>Anaconda</strong>：快速集成 Python 环境，包含了conda、Python等180多个科学包及其依赖项</p><p><strong>Hopper Disassembler v4</strong>：iOS 逆向工具</p><p><strong>GoLang</strong>：Go语言IDE</p><h1 id="设计-amp-修图"><a href="#设计-amp-修图" class="headerlink" title="设计&amp;修图"></a>设计&amp;修图</h1><p><strong>Adobe LightRoom</strong>：批量修图</p><p><strong>Sketch</strong>：原型设计神器</p><p><strong>Adobe Photoshop</strong>：业余修图使用</p><h1 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h1><p><strong>Alfred</strong>：是一个让你可以丢掉鼠标的神器</p><p><strong>Surge</strong>：网络代理工具</p><p><strong>LightPaper</strong>：免费的Markdown 编译器，十分<br>好用</p><p><strong>Charles</strong>：抓包神器，支持HTTP/HTTPS</p><p><strong>MindNode</strong>：脑图应用，iOS 和 Mac 都有，支持 iCloud 同步</p><p><strong>iTerm + zsh</strong>：iTerm 可以说是Mac 上最好用的终端应用，配合上 zsh ，大大地提高了我的工作效率</p><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p><strong>iZip</strong>：解压缩文件</p><p><strong>Movist</strong>：支持多种视频格式播放</p><p><strong>IINA</strong>：开源的视频播放器</p><p><strong>PifGIF</strong>：视频转GIF</p><p><strong>ForkLift</strong>：FTP等远程连接工具</p><p><strong>CleanMyMac</strong>：傻瓜式清理Mac垃圾</p><p><strong>TeamViewer</strong>：快速远程连接应用</p><p><strong>coconutBattery</strong>：免费查看iPhone 和 Mac 的电池损耗</p><p><strong>iMazing</strong>：可下载已下架的应用等</p><p><strong>Soda Player</strong>: 直接播放种子、磁力链接、在线视频、AceStream 链接和本地视频文件的视频播放器</p><p><strong>BND2</strong>：百度网盘不限速下载器</p><p><strong>Reader3</strong>：rss阅读器</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下个人使用 Mac OS 系统过程中常用的工具和应用&lt;br&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://tangjz.cc/categories/Tools/"/>
    
    
      <category term="Mac" scheme="http://tangjz.cc/tags/Mac/"/>
    
      <category term="Tools" scheme="http://tangjz.cc/tags/Tools/"/>
    
      <category term="App" scheme="http://tangjz.cc/tags/App/"/>
    
      <category term="效率" scheme="http://tangjz.cc/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods 更新 Specs 索引小技巧</title>
    <link href="http://tangjz.cc/2017/12/19/CocoaPods-%E6%9B%B4%E6%96%B0-Specs-%E7%B4%A2%E5%BC%95%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://tangjz.cc/2017/12/19/CocoaPods-更新-Specs-索引小技巧/</id>
    <published>2017-12-19T02:08:39.000Z</published>
    <updated>2017-12-19T03:06:58.507Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言：</strong></p><p>CocoaPods 是 iOS 上的第三方库集成工具。我们知道，开源库的更新是十分的频繁的，如果你也是用到 CocoaPods ，我们为了及时适配最新版本，不得不先更新本地 CocoaPods 的索引再来进行 pod update。<br><a id="more"></a></p><p><strong>问题：</strong></p><p>我最近使用官方推荐的终端命令来更新索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pod repo update</span><br></pre></td></tr></table></figure><p>然后发生了以下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Updating spec repo `master`</span><br><span class="line">[!] Failed to connect to GitHub to update the CocoaPods/Specs specs repo - Please check <span class="keyword">if</span> you are offline, or that GitHub is down</span><br></pre></td></tr></table></figure><p>谷歌搜了一波，各种方法尝试完也是未解。只能先寻找其它曲线救国的方法。</p><p><strong>解决方法：</strong></p><p>找到 <a href="https://github.com/CocoaPods/Specs" target="_blank" rel="noopener">Specs</a> 的 GitHub 仓库，使用 SourceTree 类型的应用，通过 git 克隆到本地：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">源URL：git@github.com:CocoaPods/Specs.git</span><br><span class="line">目标路径：/Users/yourName/.cocoapods/repos/master</span><br><span class="line">名称：master</span><br></pre></td></tr></table></figure><p>目标路径的 yourName 修改为你自己的用户名，其它请保持一致！</p><p>然后耐心等待 clone 完成。完成后重新打开终端，尝试一下 search 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod search SnapKit</span><br></pre></td></tr></table></figure><p>搜索结果出来了就证明成功啦！</p><p>之后更新索引就可以直接通过 git 拉取更新就可以啦！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CocoaPods 是 iOS 上的第三方库集成工具。我们知道，开源库的更新是十分的频繁的，如果你也是用到 CocoaPods ，我们为了及时适配最新版本，不得不先更新本地 CocoaPods 的索引再来进行 pod update。&lt;br&gt;
    
    </summary>
    
      <category term="开发" scheme="http://tangjz.cc/categories/%E5%BC%80%E5%8F%91/"/>
    
      <category term="iOS" scheme="http://tangjz.cc/categories/%E5%BC%80%E5%8F%91/iOS/"/>
    
    
      <category term="iOS" scheme="http://tangjz.cc/tags/iOS/"/>
    
      <category term="CocoaPods" scheme="http://tangjz.cc/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github Page+自定义域名+HTTPS-搭建博客教程</title>
    <link href="http://tangjz.cc/2017/12/14/Hexo-Github-Page-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D-HTTPS-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    <id>http://tangjz.cc/2017/12/14/Hexo-Github-Page-自定义域名-HTTPS-搭建博客教程/</id>
    <published>2017-12-14T05:04:17.000Z</published>
    <updated>2018-11-22T03:12:45.392Z</updated>
    
    <content type="html"><![CDATA[<p>折腾了2天，终于把博客搭起来了。再见简书 :)<br><a id="more"></a></p><h1 id="一、Hexo-搭建博客"><a href="#一、Hexo-搭建博客" class="headerlink" title="一、Hexo 搭建博客"></a>一、Hexo 搭建博客</h1><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>下载 <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">node.js</a> 并安装（官网下载安装，已安装可以跳过此步骤），默认会安装 npm。</li><li><p>下载安装 hexo。打开终端：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure></li></ul><h3 id="本地搭建-hexo-静态博客"><a href="#本地搭建-hexo-静态博客" class="headerlink" title="本地搭建 hexo 静态博客"></a>本地搭建 hexo 静态博客</h3><ul><li>新建一个文件夹，名字随意，如 MyBlog</li><li><p>进入该文件夹内，终端运行 git，输入：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init（生成hexo模板，可能要翻墙）</span><br></pre></td></tr></table></figure></li><li><p>生成完模板，运行:</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>最后运行：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server （运行程序，访问本地localhost:4000可以看到博客已经搭建成功）</span><br></pre></td></tr></table></figure></li></ul><h3 id="将博客与Github关联"><a href="#将博客与Github关联" class="headerlink" title="将博客与Github关联"></a>将博客与Github关联</h3><ul><li>在 Github 上创建名字为 XXX.github.io 的项目，XXX为自己的 github 用户名。</li><li>打开本地的 MyBlog 文件夹项目内的_config.yml 配置文件，将其中的 type 设置为git，repository 是你 github.io 仓库的 git 地址</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/janztam/janztam.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><ul><li>运行：npm install hexo-deployer-git –save</li><li>运行：hexo g（本地生成静态文件）</li><li>运行：hexo d（将本地静态文件推送至Github）</li></ul><p>此时，打开浏览器，访问 <a href="http://XXX.github.io" target="_blank" rel="noopener">http://XXX.github.io</a></p><h3 id="更新文章"><a href="#更新文章" class="headerlink" title="更新文章"></a>更新文章</h3><ul><li>在 MyBlog 目录下执行：hexo new “我的第一篇文章”，会在 source-&gt;_posts 文件夹内生成一个.md 文件。</li><li>编辑该文件（遵循 Markdown 规则）</li><li>修改起始字段<ul><li>title 文章的标题</li><li>date 创建日期 （文件的创建日期 ）</li><li>updated 修改日期 （ 文件的修改日期）</li><li>comments 是否开启评论 true</li><li>tags 标签</li><li>categories 分类</li><li>permalink url 中的名字（文件名）</li></ul></li><li>编写正文内容（MakeDown）</li><li>hexo clean 删除本地静态文件（Public目录），可不执行。</li><li>hexo g 生成本地静态文件（Public目录）</li><li>hexo deploy 将本地静态文件推送至github（hexo d）</li></ul><h5 id="文章标签设置"><a href="#文章标签设置" class="headerlink" title="文章标签设置"></a>文章标签设置</h5><p>先生成标签页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>修改标签页面的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2017-12-13 12:39:04</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure><p>文章里设置主要有2种方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tags: [tag1,tag2]</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tags:</span><br><span class="line">- tag1</span><br><span class="line">- tag2</span><br></pre></td></tr></table></figure><h5 id="文章分类设置"><a href="#文章分类设置" class="headerlink" title="文章分类设置"></a>文章分类设置</h5><p>先生成分类页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>修改分类页面的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 分类</span><br><span class="line">date: 2017-12-13 12:39:04</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure><p>文章里设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">categories: 开发</span><br></pre></td></tr></table></figure><p>如果想要设置子分类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">categories: [开发,Python]</span><br></pre></td></tr></table></figure><h5 id="设置首页文章不显示全文"><a href="#设置首页文章不显示全文" class="headerlink" title="设置首页文章不显示全文"></a>设置首页文章不显示全文</h5><p>在文章摘要下面加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure></p><h5 id="添加文章更新时间"><a href="#添加文章更新时间" class="headerlink" title="添加文章更新时间"></a>添加文章更新时间</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">直接修改主题配置文件（博客主目录）/themes/next/_config.yml，中找到  </span><br><span class="line"> updated_at: false   </span><br><span class="line">修改为  </span><br><span class="line"> updated_at: true</span><br></pre></td></tr></table></figure><h3 id="设置-RSS"><a href="#设置-RSS" class="headerlink" title="设置 RSS"></a>设置 RSS</h3><ul><li><p>首先，先安装 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a>，cd 博客目录，输入：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></li><li><p>安装完 hexo-generator-feed 后，将其配置到根目录的 _config.yml</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: http://hexo.io/plugins/</span><br><span class="line">#RSS订阅</span><br><span class="line">plugin:</span><br><span class="line">- hexo-generator-feed</span><br></pre></td></tr></table></figure></li><li><p>最后，在你当前主题下的_config.yml下，添加RSS订阅链接即可：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: &quot;/atom.xml&quot;</span><br></pre></td></tr></table></figure></li><li><p>添加之后，运行 hexo g 后，就会在页面上生成 RSS 图标</p></li></ul><h1 id="二、域名绑定-HTTPS"><a href="#二、域名绑定-HTTPS" class="headerlink" title="二、域名绑定+HTTPS"></a>二、域名绑定+HTTPS</h1><p>为什么要上HTTPS？主要是防止流量劫持，和提升逼格吧。哈哈哈哈哈哈。</p><p>先购买域名。我是在阿里云域名上购买的 cc 域名，主要是便宜，5 年才 96 RMB！</p><p><strong>2018年开始，GitHub Page 已经提供 HTTPS 了。</strong></p><ol><li><p><strong>设置自己的域名。</strong> 在 <code>GitHub Pages - Custom domain</code> 中设置自己的域名，我这里设置成 <code>tangjz.cc</code></p></li><li><p>在你自己的域名管理中设置 DNS 解析，我的 cc 域名使用的是阿里云，在域名管理里面设置如下的域名解析规则：</p><p> | 记录类型 | 主机记录 | 解析线路（isp） |  记录值 | TTL |<br> | ——–   | :—–:   | :—–:  | :—-: | :—-: |<br> | CNAME | www |   默认    | janztam.github.io | 1天 |<br> | CNAME | @     |   默认    | janztam.github.io | 1天 |</p></li><li><p>刷新一下 GitHub Page 的设置页。现在你可以访问<code>http://tangjz.cc</code>了。</p></li><li><p>稍等片刻，大概10分钟左右，再次刷新一下 GitHub Page 的设置页。在<code>GitHub Pages-Enforce HTTPS</code>里打上勾。叮～添加小绿锁完成～</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;折腾了2天，终于把博客搭起来了。再见简书 :)&lt;br&gt;
    
    </summary>
    
      <category term="博客" scheme="http://tangjz.cc/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="http://tangjz.cc/tags/Hexo/"/>
    
      <category term="HTTPS" scheme="http://tangjz.cc/tags/HTTPS/"/>
    
      <category term="Github" scheme="http://tangjz.cc/tags/Github/"/>
    
      <category term="Netlify" scheme="http://tangjz.cc/tags/Netlify/"/>
    
  </entry>
  
  <entry>
    <title>Xcode9 如何设置主题颜色？</title>
    <link href="http://tangjz.cc/2017/08/30/Xcode9-%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E4%B8%BB%E9%A2%98%E9%A2%9C%E8%89%B2%EF%BC%9F/"/>
    <id>http://tangjz.cc/2017/08/30/Xcode9-如何设置主题颜色？/</id>
    <published>2017-08-30T05:13:31.000Z</published>
    <updated>2017-12-14T06:49:20.172Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1. 下载主题</strong><br>从 <a href="https://github.com/hdoria/xcode-themes" target="_blank" rel="noopener">Github</a> 上下载主题，我用的是 <a href="https://github.com/hollance/WashedOut" target="_blank" rel="noopener">WashedOut</a>，效果如图：<br><a id="more"></a></p><p><img src="http://upload-images.jianshu.io/upload_images/185624-921e022636108709.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Screenshot.png"></p><p><strong>2.使用命令行创建存放主题的文件夹</strong>（不能手动创建）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/Library/Developer/Xcode/UserData/FontAndColorThemes/</span><br></pre></td></tr></table></figure><p><strong>3.然后给这个文件夹加上符号链接</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s $DRACULA_THEME/Washed-Out.xccolortheme ~/Library/Developer/Xcode/UserData/FontAndColorThemes/Washed-Out.xccolortheme</span><br></pre></td></tr></table></figure><p><strong>4.将 <code>Washed-Out.xccolortheme</code> 移到文件夹里，替换之前的符号链接</strong></p><p><strong>5.重启 Xcode 在 font&amp;colors 就可以看到下载下来的主题了</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;1. 下载主题&lt;/strong&gt;&lt;br&gt;从 &lt;a href=&quot;https://github.com/hdoria/xcode-themes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github&lt;/a&gt; 上下载主题，我用的是 &lt;a href=&quot;https://github.com/hollance/WashedOut&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WashedOut&lt;/a&gt;，效果如图：&lt;br&gt;
    
    </summary>
    
      <category term="开发" scheme="http://tangjz.cc/categories/%E5%BC%80%E5%8F%91/"/>
    
      <category term="iOS" scheme="http://tangjz.cc/categories/%E5%BC%80%E5%8F%91/iOS/"/>
    
    
      <category term="Xcode" scheme="http://tangjz.cc/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发笔记</title>
    <link href="http://tangjz.cc/2017/04/20/iOS%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    <id>http://tangjz.cc/2017/04/20/iOS开发笔记/</id>
    <published>2017-04-20T09:08:04.000Z</published>
    <updated>2018-11-22T03:26:07.884Z</updated>
    
    <content type="html"><![CDATA[<p>1、WKWebView 在 iOS8上的坑<br>设置是否可侧滑为 true，视图消失的时候，而新推出的导航控制器也实现了<br><code>interactivePopGestureRecognizer?.delegate=self</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webView?.allowsBackForwardNavigationGestures = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>就会引起手势冲突，WKWebView 会将<code>WKWebView.interactivePopGestureRecognizer?.delegate</code>设为 nil, 而继续向 nil 发送消息导致崩溃错误<br><a id="more"></a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*** -[_UINavigationInteractiveTransitionBase gestureRecognizer:</span><br><span class="line">shouldRecognizeSimultaneouslyWithGestureRecognizer:]: </span><br><span class="line">message sent to deallocated instance <span class="number">0x12cdc1d60</span></span><br></pre></td></tr></table></figure><p>解决方案</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> #available(iOS <span class="number">9</span>, *) &#123;</span><br><span class="line">   webView?.allowsBackForwardNavigationGestures = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、Swift上的单例</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 单例</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared = <span class="type">Single</span>.<span class="keyword">init</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">override</span> <span class="keyword">init</span>()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、善用 extension 、enum 和 struct 代替 Objective-C 里的<code>pch</code></p><p>4、 UIAlertController 在<strong> iOS 8 iPad</strong> 下的坑<br>需添加以下3行代码,防止崩溃</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> popoverPresentationController = alertVC.popoverPresentationController &#123;</span><br><span class="line">      popoverPresentationController.sourceView = sender</span><br><span class="line">      popoverPresentationController.sourceRect = sender.bounds</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、Swift 的闭包初始化</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> finish: () -&gt; <span class="type">Void</span> = &#123; () <span class="keyword">in</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可精简为:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> finish = &#123;&#125;</span><br></pre></td></tr></table></figure><p>6、一句代码隐藏或显示导航栏黑线</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.navigationController?.navigationBar.subviews.first?.subviews.first?.isHidden = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>7、Swift下的MD5,前提需引入OC的一个头文件<code>#import &lt;CommonCrypto/CommonCrypto.h&gt;</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> md5 : <span class="type">String</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> str = <span class="keyword">self</span>.cString(using: <span class="type">String</span>.<span class="type">Encoding</span>.utf8)</span><br><span class="line">        <span class="keyword">let</span> strLen = <span class="type">CC_LONG</span>(<span class="keyword">self</span>.lengthOfBytes(using: <span class="type">String</span>.<span class="type">Encoding</span>.utf8))</span><br><span class="line">        <span class="keyword">let</span> digestLen = <span class="type">Int</span>(<span class="type">CC_MD5_DIGEST_LENGTH</span>)</span><br><span class="line">        <span class="keyword">let</span> result = <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">CUnsignedChar</span>&gt;.allocate(capacity: digestLen)</span><br><span class="line">        </span><br><span class="line">        <span class="type">CC_MD5</span>(str!, strLen, result)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> hash = <span class="type">NSMutableString</span>()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> ..&lt; digestLen &#123;</span><br><span class="line">            hash.appendFormat(<span class="string">"%02x"</span>, result[i])</span><br><span class="line">        &#125;</span><br><span class="line">        result.deinitialize()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="type">String</span>(format: hash <span class="keyword">as</span> <span class="type">String</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8、将手机号 15912341234 中间 5 位替换成字符 *</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">replaceByX</span><span class="params">(startIndex:Int,endIndex:Int)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> start = <span class="keyword">self</span>.index(<span class="keyword">self</span>.startIndex, offsetBy: startIndex)</span><br><span class="line">        <span class="keyword">let</span> end = <span class="keyword">self</span>.index(<span class="keyword">self</span>.startIndex, offsetBy: endIndex)</span><br><span class="line">        <span class="keyword">var</span> str = <span class="type">String</span>()</span><br><span class="line">        <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;endIndex - startIndex&#123;</span><br><span class="line">            str += <span class="string">"*"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.replacingCharacters(<span class="keyword">in</span>: start..&lt;end, with: str)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"15912341234"</span>.replaceByX(startIndex:<span class="number">3</span>,endIndex:<span class="number">8</span>))</span><br><span class="line"><span class="comment">//输出159*****234</span></span><br></pre></td></tr></table></figure><p>9、验证码业务，UIButton 如何倒计时更改 title，注意将 UIButton 的 type 设为 custom，这样可以避免改变 title 的时候 Button 会一闪一闪的</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIButton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">startTime</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 定义需要计时的时间</span></span><br><span class="line">        <span class="keyword">var</span> timeCount = <span class="number">60</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span>.isUserInteractionEnabled = <span class="literal">false</span></span><br><span class="line">        <span class="comment">// 在global线程里创建一个时间源</span></span><br><span class="line">        <span class="keyword">let</span> codeTimer = <span class="type">DispatchSource</span>.makeTimerSource(queue: <span class="type">DispatchQueue</span>.global())</span><br><span class="line">        <span class="comment">// 设定这个时间源是每秒循环一次，立即开始</span></span><br><span class="line">        codeTimer.scheduleRepeating(deadline: .now(), interval: .seconds(<span class="number">1</span>))</span><br><span class="line">        <span class="comment">// 设定时间源的触发事件</span></span><br><span class="line">        codeTimer.setEventHandler(handler: &#123;</span><br><span class="line">            <span class="comment">// 每秒计时一次</span></span><br><span class="line">            timeCount = timeCount - <span class="number">1</span></span><br><span class="line">            <span class="comment">// 返回主线程处理一些事件，更新UI等等</span></span><br><span class="line">            <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                 <span class="comment">//do sth</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 时间到了取消时间源</span></span><br><span class="line">            <span class="keyword">if</span> timeCount &lt;= <span class="number">0</span> &#123;</span><br><span class="line">                codeTimer.cancel()</span><br><span class="line">                <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                    <span class="keyword">self</span>.isUserInteractionEnabled = <span class="literal">true</span></span><br><span class="line">                    <span class="comment">//do sth</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 启动时间源</span></span><br><span class="line">        codeTimer.resume()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10、获取当前 UITextField 的输入长度</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">textField</span><span class="params">(<span class="number">_</span> textField: UITextField, shouldChangeCharactersIn </span></span></span><br><span class="line"><span class="function"><span class="params">                     range: NSRange, </span></span></span><br><span class="line"><span class="function"><span class="params">  replacementString string: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="comment">//获取输入长度</span></span><br><span class="line">        <span class="keyword">let</span> newLength = (textField.text?.utf16.<span class="built_in">count</span>)! + string.utf16.<span class="built_in">count</span> - range.length</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>11、某个代理只能 iOS 10 才可用，但还要适配 iOS 8 怎么办？</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@available</span>(iOS <span class="number">10.0</span>, *)</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">AppDelegate</span>: <span class="title">UNUserNotificationCenterDelegate</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>12、<strong>避免 <code>retaincycle</code>（循环引用）</strong>，一些情况下，强引用会导致 ViewController 无法释放。</p><ul><li>如果你的 UITableViewCell 使用了闭包，得使用闭包的时候加上 <code>[weak self]</code> 避免强引用，如：</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cell.clickButton = &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">self</span>?.model.name = <span class="string">"cuke"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 deinit 查看 ViewController 是否被释放</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">deinit</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"I am dead"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>protocol</code> 导致的强引用，避免强引用的代码，如：</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">ClassADelegate</span>: <span class="title">class</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassA</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">weak</span> <span class="keyword">var</span> classADelegate: <span class="type">ClassADelegate?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>13、<strong>Swift 4</strong> 16进制颜色和 UIColor 相互转换</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIColor</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(hexString: <span class="type">String</span>, alpha: <span class="type">CGFloat</span> = <span class="number">1.0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> hexString: <span class="type">String</span> = hexString.trimmingCharacters(<span class="keyword">in</span>: <span class="type">CharacterSet</span>.whitespacesAndNewlines)</span><br><span class="line">        <span class="keyword">let</span> scanner = <span class="type">Scanner</span>(string: hexString)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (hexString.hasPrefix(<span class="string">"#"</span>)) &#123;</span><br><span class="line">            scanner.scanLocation = <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> color: <span class="type">UInt32</span> = <span class="number">0</span></span><br><span class="line">        scanner.scanHexInt32(&amp;color)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> mask = <span class="number">0x000000FF</span></span><br><span class="line">        <span class="keyword">let</span> r = <span class="type">Int</span>(color &gt;&gt; <span class="number">16</span>) &amp; mask</span><br><span class="line">        <span class="keyword">let</span> g = <span class="type">Int</span>(color &gt;&gt; <span class="number">8</span>) &amp; mask</span><br><span class="line">        <span class="keyword">let</span> b = <span class="type">Int</span>(color) &amp; mask</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> red   = <span class="type">CGFloat</span>(r) / <span class="number">255.0</span></span><br><span class="line">        <span class="keyword">let</span> green = <span class="type">CGFloat</span>(g) / <span class="number">255.0</span></span><br><span class="line">        <span class="keyword">let</span> blue  = <span class="type">CGFloat</span>(b) / <span class="number">255.0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(red:red, green:green, blue:blue, alpha:alpha)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toHexString</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> r:<span class="type">CGFloat</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> g:<span class="type">CGFloat</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> b:<span class="type">CGFloat</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> a:<span class="type">CGFloat</span> = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        getRed(&amp;r, green: &amp;g, blue: &amp;b, alpha: &amp;a)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> rgb:<span class="type">Int</span> = (<span class="type">Int</span>)(r*<span class="number">255</span>)&lt;&lt;<span class="number">16</span> | (<span class="type">Int</span>)(g*<span class="number">255</span>)&lt;&lt;<span class="number">8</span> | (<span class="type">Int</span>)(b*<span class="number">255</span>)&lt;&lt;<span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="type">String</span>(format:<span class="string">"#%06x"</span>, rgb)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">label.textColor = <span class="type">UIColor</span>(hexString: <span class="string">"F5F5F5"</span>)</span><br><span class="line"><span class="keyword">var</span> hex = label.textColor.toHexString()</span><br></pre></td></tr></table></figure><p>14、当数值可能超过 2^24 的时候，使用<code>Double</code>代替<code>Float</code>，<code>Float</code>的精度只有 2^24， 而且精度不准。</p><p>15、函数有2个以上的闭包，同时忽略的话会默认执行函数最后一个</p><p>16、相册选择，要考虑 iCloud 相册的情况</p><p>17、计算剩余天数的时候，要使用 <code>yyyy-MM-dd HH:mm:ss</code> 的格式，<code>yyyy-MM-dd</code>会存在时区问题，减了8个小时</p><p>18、项目有可能存在多个开发环境，导致推送收不了。<br>解决：多创一个应用，对应开发环境的包名。创建应用分组，将这些应用加入到分组里。服务器按照应用分组推送，需要用极光北京域名的API。</p><p>19、利用GCD按顺序执行异步任务，dispatch_suspend，dispatch_resume提供了“挂起、恢复”队列的功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t session = dispatch_queue_create(&quot;sq&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line"></span><br><span class="line">    NSLog(@&quot;1&quot;);</span><br><span class="line"></span><br><span class="line">    dispatch_time_t delayTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC));</span><br><span class="line">    dispatch_after(delayTime, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        NSLog(@&quot;2&quot;);</span><br><span class="line">        dispatch_resume(session);</span><br><span class="line">    &#125;);</span><br><span class="line">    dispatch_suspend(session);</span><br><span class="line"></span><br><span class="line">    //执行了延时的任务再执行这个</span><br><span class="line">    dispatch_async(session, ^&#123;</span><br><span class="line">        NSLog(@&quot;3&quot;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>此段代码输出 1、2、3</p><p>20、删除无用模拟器，路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Library/Developer/CoreSimulator/Profiles/Runtimes</span><br></pre></td></tr></table></figure><p>待更新。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、WKWebView 在 iOS8上的坑&lt;br&gt;设置是否可侧滑为 true，视图消失的时候，而新推出的导航控制器也实现了&lt;br&gt;&lt;code&gt;interactivePopGestureRecognizer?.delegate=self&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;webView?.allowsBackForwardNavigationGestures = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就会引起手势冲突，WKWebView 会将&lt;code&gt;WKWebView.interactivePopGestureRecognizer?.delegate&lt;/code&gt;设为 nil, 而继续向 nil 发送消息导致崩溃错误&lt;br&gt;
    
    </summary>
    
      <category term="开发" scheme="http://tangjz.cc/categories/%E5%BC%80%E5%8F%91/"/>
    
      <category term="iOS" scheme="http://tangjz.cc/categories/%E5%BC%80%E5%8F%91/iOS/"/>
    
    
      <category term="iOS" scheme="http://tangjz.cc/tags/iOS/"/>
    
      <category term="Swift" scheme="http://tangjz.cc/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Apple Developer Program 的基本申请流程</title>
    <link href="http://tangjz.cc/2017/04/08/Apple-Developer-Program-%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%B3%E8%AF%B7%E6%B5%81%E7%A8%8B/"/>
    <id>http://tangjz.cc/2017/04/08/Apple-Developer-Program-的基本申请流程/</id>
    <published>2017-04-08T07:10:17.000Z</published>
    <updated>2017-12-14T07:12:33.254Z</updated>
    
    <content type="html"><![CDATA[<p>关于 Apple Developer Program 的基本申请流程，请参考以下三个步骤：<br><a id="more"></a></p><h1 id="第一步：-有效的Apple-ID"><a href="#第一步：-有效的Apple-ID" class="headerlink" title="第一步： 有效的Apple ID"></a>第一步： 有效的Apple ID</h1><p>Apple ID在申请开发者帐户之前，您需要一个有效的 Apple ID。如果您尚未申请 Apple ID，请至以下网站点选 Create an Apple ID 提交申请：<br><a href="appleid.apple.com">appleid.apple.com</a></p><h1 id="第二步：-D-U-N-S-Number"><a href="#第二步：-D-U-N-S-Number" class="headerlink" title="第二步：  D-U-N-S Number"></a>第二步：  D-U-N-S Number</h1><p>（如您准备申请的是个人版本的计划，可跳过此步骤）。公司版和企业版的 Apple 开发者帐户申请需要您提交 D-U-N-S Number。您可使用以下链接免费获取，申请的表格需要您用罗马字符填写：<br><a href="https://developer.apple.com/enroll/duns-lookup/#/search" target="_blank" rel="noopener">https://developer.apple.com/enroll/duns-lookup/#/search</a></p><p>D-U-N-S Number申请常见问题：<br><a href="https://developer.apple.com/support/D-U-N-S/cn/" target="_blank" rel="noopener">https://developer.apple.com/support/D-U-N-S/cn/</a></p><p>Dun &amp; Bradstreet（邓白氏）全球支持部门:<br> <a href="mailto:appdeveloper@dnb.com" target="_blank" rel="noopener">appdeveloper@dnb.com</a> </p><p>D-U-N-S Number 的申请时间约需要七个工作日。您的 Dun &amp; Bradstreet（邓白氏）帐户创建完成后另外还需要最多 14 个工作日的时间在 Apple 系统里面同步。</p><h1 id="第三步：加入-Apple-Developer"><a href="#第三步：加入-Apple-Developer" class="headerlink" title="第三步：加入 Apple Developer"></a>第三步：加入 Apple Developer</h1><p><strong>ProgramApple Developer Program - 每年 ¥688（99美元）：</strong></p><ul><li><strong>Individual（个人）：</strong></li><li>此计划使开发者能够开发并发布针对 Apple 设备的商业应用。</li><li>此计划允许开发者分发其应用程序至设备上作测试, 并能分发应用程序到 App Store 上进行发布及销售。</li><li>此计划将无法创建团队，亦不能添加管理成员至帐户内。</li><li>开发者参加此计划将会以其个人名义作为开发商于 App Store 上进行应用销售。</li></ul><ul><li><strong>Company/Organization（公司/组织）：</strong></li><li>公司应拥有有效的 D-U-N-S Number。</li><li>此计划使开发者能够开发并发布针对 Apple 设备的商业应用。</li><li>此方案允许公司分发其应用程序至设备上作测试，并能分发其应用程序到 App Store 上进行发布或销售。</li><li>这个程序允许开发人员创建团队，并可以添加成员至其开发者团队中。</li><li>参加此计划的公司名称将作为开发商于 App Store 上进行应用销售。</li></ul><p>标准版计划 Apple Developer Program 的申请链接：<br><a href="https://developer.apple.com/programs/enroll/cn/" target="_blank" rel="noopener">https://developer.apple.com/programs/enroll/cn/</a></p><p><strong>Apple Developer Enterprise Program（企业）- 每年 ¥1988（299美元）：</strong></p><ul><li>公司应拥有有效的 D-U-N-S Number。</li><li>此计划使开发者能够开发针对 Apple 设备的应用程式，并对其员工进行发布。</li><li>此计划允许开发人员创建一个团队，并可以添加其他开发者至其开发者团队中。</li><li>此计划将不允许该公司在 App Store 出售他们的应用程序。</li></ul><p>企业版计划 Apple Developer Enterprise Program 的申请链接：<br><a href="https://developer.apple.com/programs/enterprise/enroll/cn/" target="_blank" rel="noopener">https://developer.apple.com/programs/enterprise/enroll/cn/</a></p><p>其他有关 Apple Developer Program 开发计划的网站：计划会籍功能概述<br><a href="https://developer.apple.com/programs/whats-included/cn/" target="_blank" rel="noopener">https://developer.apple.com/programs/whats-included/cn/</a></p><p>何种计划适合您<br><a href="https://developer.apple.com/support/compare-memberships/cn/" target="_blank" rel="noopener">https://developer.apple.com/support/compare-memberships/cn/</a></p><p>计划注册常见的问与答<br><a href="https://developer.apple.com/support/enrollment/cn/" target="_blank" rel="noopener">https://developer.apple.com/support/enrollment/cn/</a></p><p>计划购买与激活<br><a href="https://developer.apple.com/support/purchase-activation/cn/" target="_blank" rel="noopener">https://developer.apple.com/support/purchase-activation/cn/</a></p><p>苹果中国的办公时间是北京时间周一至周五，09:00 至 17:00，电话号码是 4006-701-855</p><p>全球 Apple 开发者计划支持部门电话：<br> <a href="https://developer.apple.com/contact/phone/cn/" target="_blank" rel="noopener">https://developer.apple.com/contact/phone/cn/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于 Apple Developer Program 的基本申请流程，请参考以下三个步骤：&lt;br&gt;
    
    </summary>
    
      <category term="开发" scheme="http://tangjz.cc/categories/%E5%BC%80%E5%8F%91/"/>
    
      <category term="iOS" scheme="http://tangjz.cc/categories/%E5%BC%80%E5%8F%91/iOS/"/>
    
    
      <category term="iOS" scheme="http://tangjz.cc/tags/iOS/"/>
    
      <category term="开发证书" scheme="http://tangjz.cc/tags/%E5%BC%80%E5%8F%91%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>利用Multipeer Connectivity框架进行WiFi传输</title>
    <link href="http://tangjz.cc/2016/03/15/%E5%88%A9%E7%94%A8Multipeer-Connectivity%E6%A1%86%E6%9E%B6%E8%BF%9B%E8%A1%8CWiFi%E4%BC%A0%E8%BE%93/"/>
    <id>http://tangjz.cc/2016/03/15/利用Multipeer-Connectivity框架进行WiFi传输/</id>
    <published>2016-03-15T04:25:08.000Z</published>
    <updated>2017-12-14T06:49:21.702Z</updated>
    
    <content type="html"><![CDATA[<p><strong>什么是Multipeer Connectivity？</strong><br><a id="more"></a></p><p>在iOS7中，引入了一个全新的框架——Multipeer Connectivity（多点连接）。利用Multipeer Connectivity框架，即使在没有连接到WiFi（WLAN）或移动网络（xG）的情况下，距离较近的Apple设备（iMac/iPad/iPhone）之间可基于蓝牙和WiFi（P2P WiFi）技术进行发现和连接实现近场通信。</p><p>Multipeer Connectivity扩充的功能与利用AirDrop传输文件非常类似，可以将其看作AirDrop不能直接使用的补偿，代价是需要自己实现。</p><p>本Demo主要用到4个类：<br><code>MCBrowserViewController</code>: MCBrowserViewController继承自UIViewController，提供了基本的UI应用框架。</p><p><code>MCAdvertiserAssistant</code>: MCAdvertiserAssistant为针对Advertiser封装的管理助手,主要处理广播信息。</p><p><code>MCSession</code>: 类似TCP链接中的socket。创建MCSession时，需指定自身MCPeerID，类似bind。</p><p><code>MCPeerID</code>: 类似sockaddr，用于标识连接的两端endpoint，通常是昵称或设备名称。</p><p>1、简单地建立一个界面，主要有连接和发送2个UIButton。</p><p><img src="http://upload-images.jianshu.io/upload_images/185624-0bac7e71855c258c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="create_button.png"></p><p>2、Multipeer Connectivity框架初始化这4个类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - Wifi Sharing Methods</span><br><span class="line">-(void)setUpMultipeer</span><br><span class="line">&#123;</span><br><span class="line">    //  Setup peer ID</span><br><span class="line">    self.myPeerID = [[MCPeerID alloc] initWithDisplayName:[UIDevice currentDevice].name];</span><br><span class="line">    </span><br><span class="line">    //  Setup session</span><br><span class="line">    self.mySession = [[MCSession alloc] initWithPeer:self.myPeerID];</span><br><span class="line">    self.mySession.delegate = self;</span><br><span class="line">    </span><br><span class="line">    //  Setup BrowserViewController</span><br><span class="line">    self.browserVC = [[MCBrowserViewController alloc] initWithServiceType:@&quot;chat&quot; session:self.mySession];</span><br><span class="line">    self.browserVC.delegate = self;</span><br><span class="line">    </span><br><span class="line">    //  Setup Advertiser</span><br><span class="line">    self.advertiser = [[MCAdvertiserAssistant alloc] initWithServiceType:@&quot;chat&quot; discoveryInfo:nil session:self.mySession];</span><br><span class="line">    [self.advertiser start];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void)showBrowserVC</span><br><span class="line">&#123;</span><br><span class="line">    [self presentViewController:self.browserVC animated:YES completion:nil];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void)dismissBrowserVC</span><br><span class="line">&#123;</span><br><span class="line">    [self.browserVC dismissViewControllerAnimated:YES completion:^(void)&#123;</span><br><span class="line">        [self invokeAlertMethod:@&quot;连接成功&quot; Body:@&quot;Both device connected successfully.&quot; Delegate:nil];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void)stopWifiSharing:(BOOL)isClear</span><br><span class="line">&#123;</span><br><span class="line">    if(isClear &amp;&amp; self.mySession != nil)&#123;</span><br><span class="line">        [self.mySession disconnect];</span><br><span class="line">        </span><br><span class="line">        [self.mySession setDelegate:nil];</span><br><span class="line">        </span><br><span class="line">        self.mySession = nil;</span><br><span class="line">        </span><br><span class="line">        self.browserVC = nil;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、<code>MCBrowserViewController</code>代理方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#pragma marks MCBrowserViewControllerDelegate</span><br><span class="line">// 点击完成</span><br><span class="line">-(void)browserViewControllerDidFinish:(MCBrowserViewController *)browserViewController</span><br><span class="line">&#123;</span><br><span class="line">    [self dismissBrowserVC];</span><br><span class="line">    [marrReceiveData removeAllObjects];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 点击取消</span><br><span class="line">-(void)browserViewControllerWasCancelled:(MCBrowserViewController *)browserViewController</span><br><span class="line">&#123;</span><br><span class="line">    [self dismissBrowserVC];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、<code>MCSession</code>代理方法<br>主要处理发送方传递的文件或者信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">// Received data from remote peer</span><br><span class="line">- (void)session:(MCSession *)session didReceiveData:(NSData *)data fromPeer:(MCPeerID *)peerID</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;data receiveddddd : %lu&quot;,(unsigned long)data.length);</span><br><span class="line">    </span><br><span class="line">    if (data.length &gt; 0) &#123;</span><br><span class="line">        if (data.length &lt; 2) &#123;</span><br><span class="line">            noOfDataSend++;</span><br><span class="line">            NSLog(@&quot;noofdatasend : %zd&quot;,noOfDataSend);</span><br><span class="line">            NSLog(@&quot;array count : %zd&quot;,marrFileData.count);</span><br><span class="line">            if (noOfDataSend &lt; ([marrFileData count])) &#123;</span><br><span class="line">                [self.mySession sendData:[marrFileData objectAtIndex:noOfDataSend] toPeers:[self.mySession connectedPeers] withMode:MCSessionSendDataReliable error:nil];</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                [self.mySession sendData:[@&quot;File Transfer Done&quot; dataUsingEncoding:NSUTF8StringEncoding] toPeers:[self.mySession connectedPeers] withMode:MCSessionSendDataReliable error:nil];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if ([[[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding] isEqualToString:@&quot;File Transfer Done&quot;]) &#123;</span><br><span class="line">                [self appendFileData];</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                [self.mySession sendData:[@&quot;1&quot; dataUsingEncoding:NSUTF8StringEncoding] toPeers:[self.mySession connectedPeers] withMode:MCSessionSendDataReliable error:nil];</span><br><span class="line">                [marrReceiveData addObject:data];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Received a byte stream from remote peer</span><br><span class="line">- (void)session:(MCSession *)session didReceiveStream:(NSInputStream *)stream withName:(NSString *)streamName fromPeer:(MCPeerID *)peerID</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;did receive stream&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Start receiving a resource from remote peer</span><br><span class="line">- (void)session:(MCSession *)session didStartReceivingResourceWithName:(NSString *)resourceName fromPeer:(MCPeerID *)peerID withProgress:(NSProgress *)progress</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;start receiving&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Finished receiving a resource from remote peer and saved the content in a temporary location - the app is responsible for moving the file to a permanent location within its sandbox</span><br><span class="line">- (void)session:(MCSession *)session didFinishReceivingResourceWithName:(NSString *)resourceName fromPeer:(MCPeerID *)peerID atURL:(NSURL *)localURL withError:(NSError *)error</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;finish receiving resource&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void)session:(MCSession *)session peer:(MCPeerID *)peerID didChangeState:(MCSessionState)state</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;change state : %zd&quot;,state);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、发送图片（此Demo只是简单地做了个收发图片的Demo，此框架可实现的功能当然不止这么简单。）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">-(void)sendData</span><br><span class="line">&#123;</span><br><span class="line">    [marrFileData removeAllObjects];</span><br><span class="line">    </span><br><span class="line">    NSData *sendData = UIImagePNGRepresentation([UIImage imageNamed:@&quot;test2.png&quot;]);</span><br><span class="line">    NSUInteger length = [sendData length];</span><br><span class="line">    NSUInteger chunkSize = 100 * 1024;</span><br><span class="line">    NSUInteger offset = 0;</span><br><span class="line">    do &#123;</span><br><span class="line">        NSUInteger thisChunkSize = length - offset &gt; chunkSize ? chunkSize : length - offset;</span><br><span class="line">        NSData* chunk = [NSData dataWithBytesNoCopy:(char *)[sendData bytes] + offset</span><br><span class="line">                                             length:thisChunkSize</span><br><span class="line">                                       freeWhenDone:NO];</span><br><span class="line">        NSLog(@&quot;chunk length : %lu&quot;,(unsigned long)chunk.length);</span><br><span class="line">        </span><br><span class="line">        [marrFileData addObject:[NSData dataWithData:chunk]];</span><br><span class="line">        offset += thisChunkSize;</span><br><span class="line">    &#125; while (offset &lt; length);</span><br><span class="line">    </span><br><span class="line">    noOfdata = [marrFileData count];</span><br><span class="line">    noOfDataSend = 0;</span><br><span class="line">    </span><br><span class="line">    if ([marrFileData count] &gt; 0) &#123;</span><br><span class="line">        [self.mySession sendData:[marrFileData objectAtIndex:noOfDataSend] toPeers:[self.mySession connectedPeers] withMode:MCSessionSendDataReliable error:nil];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void)appendFileData</span><br><span class="line">&#123;</span><br><span class="line">    NSMutableData *fileData = [NSMutableData data];</span><br><span class="line">    </span><br><span class="line">    for (int i = 0; i &lt; [marrReceiveData count]; i++) &#123;</span><br><span class="line">        [fileData appendData:[marrReceiveData objectAtIndex:i]];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [fileData writeToFile:[NSString stringWithFormat:@&quot;%@/Image.png&quot;, [NSHomeDirectory() stringByAppendingPathComponent:@&quot;Documents&quot;]] atomically:YES];</span><br><span class="line">    </span><br><span class="line">    UIImageWriteToSavedPhotosAlbum([UIImage imageWithData:fileData], self, @selector(image:didFinishSavingWithError:contextInfo:), nil);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)image:(UIImage *)image didFinishSavingWithError:(NSError *)error contextInfo:(void *)contextInfo</span><br><span class="line">&#123;</span><br><span class="line">    if (!error) &#123;</span><br><span class="line">        [self invokeAlertMethod:@&quot;发送成功&quot; Body:@&quot;图片已保存到手机相册&quot; Delegate:nil];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可在<a href="https://github.com/JanzTam/WiFiShareDemo" target="_blank" rel="noopener">Github</a>上下载完整Demo。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;什么是Multipeer Connectivity？&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="开发" scheme="http://tangjz.cc/categories/%E5%BC%80%E5%8F%91/"/>
    
      <category term="iOS" scheme="http://tangjz.cc/categories/%E5%BC%80%E5%8F%91/iOS/"/>
    
    
      <category term="iOS" scheme="http://tangjz.cc/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://tangjz.cc/tags/Objective-C/"/>
    
      <category term="WiFi" scheme="http://tangjz.cc/tags/WiFi/"/>
    
  </entry>
  
  <entry>
    <title>[Swift]定位-CLLocationManager</title>
    <link href="http://tangjz.cc/2015/11/02/Swift-%E5%AE%9A%E4%BD%8D-CLLocationManager/"/>
    <id>http://tangjz.cc/2015/11/02/Swift-定位-CLLocationManager/</id>
    <published>2015-11-02T05:53:51.000Z</published>
    <updated>2017-12-14T06:49:17.520Z</updated>
    
    <content type="html"><![CDATA[<p>此文章主要介绍如何在Swift下使用CLLocationManager来获取定位的经纬度，并根据经纬度进行你地理编码来获取定位点的信息。<br><a id="more"></a></p><p>先导入<strong>MapKit</strong>头文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import MapKit</span><br></pre></td></tr></table></figure><p>为了让代码更容易理解，我预先在StoryBoard创建好了初始界面，并简单的做了下屏幕适配。</p><p><img src="http://upload-images.jianshu.io/upload_images/185624-bd16962bf53e1909.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在iOS8以上，苹果官方规定，使用定位前都必须要先经过用户同意。<br>先在Info.plist里添加2个Key，<strong>NSLocationWhenInUseUsageDescription</strong>和<strong>NSLocationAlwaysUsageDescription</strong>。之前我只添加了一个key，发现一直没有向用户发送允许请求定位的信息。把2个key都加进去就好了。</p><p><img src="http://upload-images.jianshu.io/upload_images/185624-880e06e6aad448c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="请求允许定位key.png"></p><h3 id="CLLocationManager"><a href="#CLLocationManager" class="headerlink" title="CLLocationManager"></a>CLLocationManager</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">self.locateManage.delegate = self</span><br><span class="line">        //请求定位权限</span><br><span class="line">if self.locateManage.respondsToSelector(Selector(&quot;requestAlwaysAuthorization&quot;)) &#123;</span><br><span class="line">       self.locateManage.requestAlwaysAuthorization()</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">self.locateManage.desiredAccuracy = kCLLocationAccuracyBest//定位精准度</span><br><span class="line">self.locateManage.startUpdatingLocation()//开始定位</span><br></pre></td></tr></table></figure><h3 id="MapView上显示定位点"><a href="#MapView上显示定位点" class="headerlink" title="MapView上显示定位点"></a>MapView上显示定位点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.mapViewLoca.showsUserLocation = true</span><br></pre></td></tr></table></figure><p>为了节省用户电量，苹果建议我们，一般情况下，最好不要频繁地获取定位信息，这个教程里做了个示范，我在<strong>CLLocationManager</strong>定位代理方法里面只要获取到一次信息，就停止定位，并在定位的经纬度保存到属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var currentCoordinate:CLLocationCoordinate2D?</span><br></pre></td></tr></table></figure><h3 id="CLLocationManager定位代理方法"><a href="#CLLocationManager定位代理方法" class="headerlink" title="CLLocationManager定位代理方法"></a>CLLocationManager定位代理方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">    func locationManager(manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) &#123;</span><br><span class="line">        print(&quot;hello&quot;)</span><br><span class="line">        if let newLoca = locations.last &#123;</span><br><span class="line">            CLGeocoder().reverseGeocodeLocation(newLoca, completionHandler: &#123; (pms, err) -&gt; Void in</span><br><span class="line">                if let newCoordinate = pms?.last?.location?.coordinate &#123;</span><br><span class="line">                    //此处设置地图中心点为定位点，缩放级别18</span><br><span class="line">                    self.mapViewLoca.setCenterCoordinateLevel(newCoordinate, zoomLevel: 15, animated: true)</span><br><span class="line">                    manager.stopUpdatingLocation()//停止定位，节省电量，只获取一次定位</span><br><span class="line">                    </span><br><span class="line">                    self.currentCoordinate = newCoordinate//记录定位点经纬度</span><br><span class="line">                    </span><br><span class="line">                    //取得最后一个地标，地标中存储了详细的地址信息，注意：一个地名可能搜索出多个地址</span><br><span class="line">                    let placemark:CLPlacemark = (pms?.last)!</span><br><span class="line">                    let location = placemark.location;//位置</span><br><span class="line">                    let region = placemark.region;//区域</span><br><span class="line">                    let addressDic = placemark.addressDictionary;//详细地址信息字典,包含以下部分信息</span><br><span class="line">//                    let name=placemark.name;//地名</span><br><span class="line">//                    let thoroughfare=placemark.thoroughfare;//街道</span><br><span class="line">//                    let subThoroughfare=placemark.subThoroughfare; //街道相关信息，例如门牌等</span><br><span class="line">//                    let locality=placemark.locality; // 城市</span><br><span class="line">//                    let subLocality=placemark.subLocality; // 城市相关信息，例如标志性建筑</span><br><span class="line">//                    let administrativeArea=placemark.administrativeArea; // 州</span><br><span class="line">//                    let subAdministrativeArea=placemark.subAdministrativeArea; //其他行政区域信息</span><br><span class="line">//                    let postalCode=placemark.postalCode; //邮编</span><br><span class="line">//                    let ISOcountryCode=placemark.ISOcountryCode; //国家编码</span><br><span class="line">//                    let country=placemark.country; //国家</span><br><span class="line">//                    let inlandWater=placemark.inlandWater; //水源、湖泊</span><br><span class="line">//                    let ocean=placemark.ocean; // 海洋</span><br><span class="line">//                    let areasOfInterest=placemark.areasOfInterest; //关联的或利益相关的地标</span><br><span class="line">                    print(location,region,addressDic)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="MKMapView缩放"><a href="#MKMapView缩放" class="headerlink" title="MKMapView缩放"></a>MKMapView缩放</h3><p>MKMapView提供的方法里并没有设置地图缩放级别的方法。这个教程里我给MKMapView添加了个extension</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func setCenterCoordinateLevel(centerCoordinate:CLLocationCoordinate2D,var zoomLevel:Double,animated:Bool)</span><br></pre></td></tr></table></figure><p>具体实现方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">public func setCenterCoordinateLevel(centerCoordinate:CLLocationCoordinate2D,var zoomLevel:Double,animated:Bool) &#123;</span><br><span class="line">       //设置最小缩放级别</span><br><span class="line">       zoomLevel  = min(zoomLevel, 22)</span><br><span class="line">       </span><br><span class="line">       let span   = self.coordinateSpanWithMapView(self, centerCoordinate: centerCoordinate, zoomLevel: zoomLevel);</span><br><span class="line">       let region = MKCoordinateRegionMake(centerCoordinate, span);</span><br><span class="line">       </span><br><span class="line">       self.setRegion(region, animated: animated)</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   func longitudeToPixelSpaceX(longitude:Double) -&gt;Double &#123;</span><br><span class="line">       return round(MERCATOR_OFFSET + MERCATOR_RADIUS * longitude * M_PI / 180.0)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   func latitudeToPixelSpaceY(latitude:Double) -&gt;Double &#123;</span><br><span class="line">       return round(MERCATOR_OFFSET - MERCATOR_RADIUS * log((1 + sin(latitude * M_PI / 180.0)) / (1 - sin(latitude * M_PI / 180.0))) / 2.0)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   func pixelSpaceXToLongitude(pixelX:Double) -&gt;Double &#123;</span><br><span class="line">       return ((round(pixelX) - MERCATOR_OFFSET) / MERCATOR_RADIUS) * 180.0 / M_PI</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   func pixelSpaceYToLatitude(pixelY:Double) -&gt;Double &#123;</span><br><span class="line">       return (M_PI / 2.0 - 2.0 * atan(exp((round(pixelY) - MERCATOR_OFFSET) / MERCATOR_RADIUS))) * 180.0 / M_PI</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   func coordinateSpanWithMapView(mapView:MKMapView,</span><br><span class="line">                         centerCoordinate:CLLocationCoordinate2D,</span><br><span class="line">                                zoomLevel:Double) -&gt; MKCoordinateSpan</span><br><span class="line">   &#123;</span><br><span class="line">       let centerPixelX = self.longitudeToPixelSpaceX(centerCoordinate.longitude)</span><br><span class="line">       let centerPixelY = self.latitudeToPixelSpaceY(centerCoordinate.latitude)</span><br><span class="line">       let zoomExponent = 20.0 - zoomLevel</span><br><span class="line">       let zoomScale = pow(2.0, zoomExponent)</span><br><span class="line">       </span><br><span class="line">       let mapSizeInPixels = mapView.bounds.size</span><br><span class="line">       let scaledMapWidth  = Double(mapSizeInPixels.width) * zoomScale</span><br><span class="line">       let scaledMapHeight = Double(mapSizeInPixels.height) * zoomScale</span><br><span class="line">       </span><br><span class="line">       let topLeftPixelX = centerPixelX - (scaledMapWidth/2)</span><br><span class="line">       let topLeftPixelY = centerPixelY - (scaledMapHeight/2)</span><br><span class="line">       </span><br><span class="line">       let minLng = self.pixelSpaceXToLongitude(topLeftPixelX)</span><br><span class="line">       let maxLng = self.pixelSpaceXToLongitude(topLeftPixelX + scaledMapWidth)</span><br><span class="line">       let longitudeDelta = maxLng - minLng</span><br><span class="line">       </span><br><span class="line">       let minLat = self.pixelSpaceYToLatitude(topLeftPixelY);</span><br><span class="line">       let maxLat = self.pixelSpaceYToLatitude(topLeftPixelY + scaledMapHeight);</span><br><span class="line">       let latitudeDelta = -1 * (maxLat - minLat);</span><br><span class="line">       </span><br><span class="line">       let span = MKCoordinateSpanMake(latitudeDelta, longitudeDelta)</span><br><span class="line">       return span</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>运行代码，如果出现报错，是因为项目里是纯Swift的话，需要将【Build settings-&gt;Embedded Content Contains Swift Code】的<code>no</code>改为<code>yes</code>.</p><p>你可以在<a href="https://github.com/JanzTam/MKMapView_swift" target="_blank" rel="noopener">Github</a>找到此教程的代码。</p><hr><p>参考资料：<br><a href="http://troybrant.net/blog/2010/01/mkmapview-and-zoom-levels-a-visual-guide/" target="_blank" rel="noopener">MKMapView and Zoom Levels: A Visual Guide</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此文章主要介绍如何在Swift下使用CLLocationManager来获取定位的经纬度，并根据经纬度进行你地理编码来获取定位点的信息。&lt;br&gt;
    
    </summary>
    
      <category term="开发" scheme="http://tangjz.cc/categories/%E5%BC%80%E5%8F%91/"/>
    
      <category term="iOS" scheme="http://tangjz.cc/categories/%E5%BC%80%E5%8F%91/iOS/"/>
    
    
      <category term="Swift" scheme="http://tangjz.cc/tags/Swift/"/>
    
      <category term="MapView" scheme="http://tangjz.cc/tags/MapView/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods快速配置并上手</title>
    <link href="http://tangjz.cc/2015/10/25/CocoaPods%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE%E5%B9%B6%E4%B8%8A%E6%89%8B/"/>
    <id>http://tangjz.cc/2015/10/25/CocoaPods快速配置并上手/</id>
    <published>2015-10-25T05:15:43.000Z</published>
    <updated>2022-05-04T07:18:33.534Z</updated>
    
    <content type="html"><![CDATA[<p><strong>此文章希望能帮助到未使用过CocoaPods的iOS开发者。</strong><br><a id="more"></a></p><p>如果你还没有用上CocoaPods，建议你花一小段时间浏览这篇教程，并按着教程快速配置CocoaPods。</p><p>当前系统为：<strong>OS X 10.11</strong> ,如果哪里写得不对，请留言提醒我，我会感激你的。或者有什么疑问，也可留言，谢谢。</p><p><strong>什么是CocoaPods？</strong><br>这个不用说了吧，没用过至少也听过吧。真不知道的自己百度吧。</p><h1 id="快速配置"><a href="#快速配置" class="headerlink" title="快速配置"></a>快速配置</h1><p><strong>1、安装Brew</strong><br>进入Homebrew的<a href="http://brew.sh/" target="_blank" rel="noopener">官方网站</a>找到它的终端安装命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><p>下载需要一段时间,执行以后不出意外,你会看到终端提示安装成功</p><p><strong>2、更新Ruby</strong><br>通过Brew将Ruby更新到最新版本,OS X 已经自带了Ruby不过版本偏低.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install ruby</span><br></pre></td></tr></table></figure><p>更新成功以后重启终端,并执行以下命令来检查一下Ruby和gem当前使用的版本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -v</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem -v</span><br></pre></td></tr></table></figure><p>以下重要一步！</p><p>ruby 的软件源 因为使用的是亚马逊的云服务，所以被墙了，需要更新一下 ruby 的源，使用如下代码将官方的 ruby 源替换成  <a href="https://gems.ruby-china.com/" target="_blank" rel="noopener">https://gems.ruby-china.com/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这里是3句命令，请按顺序执行</span><br><span class="line">gem sources --remove https://rubygems.org/</span><br><span class="line">gem sources -a https://gems.ruby-china.com/</span><br><span class="line">gem sources -l</span><br></pre></td></tr></table></figure><p><strong>3、通过gem安装CocoaPods</strong><br>在安装之前,还需要将<strong>Xcode</strong>里的<strong>Command line</strong>工具安装好。</p><p>gem安装CocoaPods的原来命令：<br><del>sudo gem install cocoapods</del></p><p>在OS 10.11下使用原来的命令你会发现并不能如愿安装成功。应该改用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install -n /usr/local/bin cocoapods</span><br></pre></td></tr></table></figure><p>安装成功查看下当前cocoapods版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod --version</span><br></pre></td></tr></table></figure><p>使用<strong>Search</strong>命令来看看你需要的第三方库是否存在!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod search AFNetworking</span><br></pre></td></tr></table></figure><p>看到AFNetworking搜索结果出来了，到此,<strong>CocoaPods</strong>的安装就完成了</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>打开终端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd 工程路径</span><br></pre></td></tr></table></figure><p>在工程下创建一个默认的Podfile执行命令：<br>执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod init</span><br></pre></td></tr></table></figure><p>用Xcode打开Podfile命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open -a Xcode Podfile</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/185624-38e1dda736c13889.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="podfile.png"><br>以下仅用作解释，格式【解释内容】，请不要照搬配置，正常如上图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Uncomment this line to define a global platform for your project</span><br><span class="line">platform :ios, &apos;7.0&apos;  【--&gt;修改类库支持的最低iOS版本】</span><br><span class="line"># Uncomment this line if you&apos;re using Swift</span><br><span class="line"># use_frameworks! 【使用 Swift 需去掉#】</span><br><span class="line"></span><br><span class="line">target &apos;Worker&apos; do</span><br><span class="line"></span><br><span class="line">pod &apos;AMap2DMap&apos;, ‘~&gt; 3.0.0’【指定某一库的版本】</span><br><span class="line"></span><br><span class="line">pod &apos;AMapSearch&apos;</span><br><span class="line"></span><br><span class="line">pod &apos;MBProgressHUD&apos;</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>如果想让CocoaPods的引入不显示警告，在Podfile最上方加上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inhibit_all_warnings!</span><br></pre></td></tr></table></figure><p>配置好Podfile，打开终端，在工程的路径下，使用安装全部第三库的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure><p>运行<code>pod install</code>命令，等一下，不对！为什么终端一直卡在这个命令不动了？不要急，再看下去。</p><p>有时候你pod search 一些第三方SDK，发现并不是最新版本，那是因为你的本地repo还没更新。本地repo更新命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo update</span><br></pre></td></tr></table></figure><p>你会发现，现在无论是<strong>pod install</strong>还是<strong>pod repo update</strong>，都会一直卡在那里不动。这时候你需要做的是，将CocoaPods 设置成使用 gitcafe 镜像或者oschina镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这里是3句命令，请按顺序执行</span><br><span class="line">pod repo remove master</span><br><span class="line">pod repo add master https://gitcafe.com/akuandev/Specs.git</span><br><span class="line">pod repo update</span><br></pre></td></tr></table></figure><p>将以上代码中的 <code>https://gitcafe.com/akuandev/Specs.git</code><br> 替换成 <code>http://git.oschina.net/akuandev/Specs.git</code><br> 即可使用 oschina 上的镜像。<br><strong>pod repo update</strong>第一次执行的时间会比较长，CocoaPods 会将这些<code>podspec</code>索引文件更新到本地的 <code>~/.cocoapods/</code><br>目录下，这个索引文件比较大。</p><p>这以后，执行<strong>pod 命令</strong>就会快很多啦。</p><hr><p>最后，感谢以下参考资料：</p><p><a href="http://blog.csdn.net/ysy441088327/article/details/8611731" target="_blank" rel="noopener">余书懿-CocoaPods的安装和使用</a></p><p><a href="http://blog.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/" target="_blank" rel="noopener">唐巧-用CocoaPods做iOS程序的依赖管理</a></p><p><a href="http://www.jianshu.com/p/5fc15906c53a" target="_blank" rel="noopener">CocoaPods-Command-line Reference</a></p><p><a href="https://guides.cocoapods.org/terminal/commands.html#pod_repo_update" target="_blank" rel="noopener">CocoaPods 终端命令官方文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;此文章希望能帮助到未使用过CocoaPods的iOS开发者。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="开发" scheme="http://tangjz.cc/categories/%E5%BC%80%E5%8F%91/"/>
    
      <category term="iOS" scheme="http://tangjz.cc/categories/%E5%BC%80%E5%8F%91/iOS/"/>
    
    
      <category term="iOS" scheme="http://tangjz.cc/tags/iOS/"/>
    
      <category term="CocoaPods" scheme="http://tangjz.cc/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>网易新闻iOS版使用的开源组件</title>
    <link href="http://tangjz.cc/2015/05/19/%E7%BD%91%E6%98%93%E6%96%B0%E9%97%BBiOS%E7%89%88%E4%BD%BF%E7%94%A8%E7%9A%84%E5%BC%80%E6%BA%90%E7%BB%84%E4%BB%B6/"/>
    <id>http://tangjz.cc/2015/05/19/网易新闻iOS版使用的开源组件/</id>
    <published>2015-05-19T08:46:42.000Z</published>
    <updated>2017-12-14T06:49:14.080Z</updated>
    
    <content type="html"><![CDATA[<p>1、<a href="https://github.com/AFNetworking/AFNetworking" target="_blank" rel="noopener">AFNetworking</a><br>AFNetworking 采用 NSURLConnection + NSOperation, 主要方便与服务端 API 进行数据交换, 操作简单, 功能强大, 现在许多人都用它取代 ASIHTTPRequest<br><a id="more"></a></p><p>2、<a href>Apple Reachability</a><br>网络监测，可以参考下这篇文章<a href="http://www.jianshu.com/p/efcfa3c87306" target="_blank" rel="noopener">iOS网络监测如何区分2、3、4G?</a></p><p>3、<a href="https://github.com/douban/DOUAudioStreamer" target="_blank" rel="noopener">DOUAudioStreamer</a><br>豆瓣的开源软件，DOUAudioStreamer 是 iOS 和 Mac 的基于核心音频的流媒体音频播放器</p><p>4、<a href="https://github.com/nicklockwood/FXBlurView" target="_blank" rel="noopener">FXBlurView</a><br>iOS 模糊背景类库, 可以方便的根据底层显示的状态生成模糊效果</p><p>5、<a href="https://github.com/siriusdely/GTMNSString-HTML" target="_blank" rel="noopener">GTMNSString+HTML</a><br>谷歌开源的用于过滤HTML标签</p><p>6、<a href="https://github.com/nicklockwood/iCarousel" target="_blank" rel="noopener">iCarousel</a><br>iCarousel是一个类，它继承于UIView。用于简化实现各种类型的旋转木马(分页滚动视图）</p><p>7、<a href="https://github.com/jaydee3/JDStatusBarNotification" target="_blank" rel="noopener">JDStatusBarNotification</a><br>在状态栏顶部显示通知。可以自定义颜色字体以及动画。支持进度显示以及显示状态指示器</p><p>8、<a href="https://github.com/webmproject/libwebp" target="_blank" rel="noopener">libwebp</a><br>可用于webp的移植，具体还是去看git吧</p><p>9、<a href="https://github.com/SnapKit/Masonry" target="_blank" rel="noopener">masonry</a><br>一个轻量级的布局框架, 同时支持 iOS 和 Mac OS X, 语法优雅, 帮助开发者快速适配不同分辨率的 iOS 设备</p><p>10、<a href="https://github.com/mattgemmell/MGTemplateEngine" target="_blank" rel="noopener">MGTemplateEngine</a><br>MGTemplateEngine比较象 PHP 中的 Smarty、FreeMarker 和 Django的模版引擎，是一个轻量级的引擎，简单好用。只要设置很多不同的HMTL模版，就能轻松的实现一个View多种内容格式的显示，对于不熟悉HTML或者减轻 工作量而言，把这些工作让设计分担一下还是很好的，也比较容易实现设计想要的效果。</p><p>11、<a href="https://github.com/ninjinkun/NJKWebViewProgress" target="_blank" rel="noopener">NJKWebViewProgress</a><br> NJKWebViewProgress 是一个 UIWebView 的进度条接口库,UIWebView 本身是不提供进度条的。</p><p>12、<a href="https://github.com/facebook/pop" target="_blank" rel="noopener">pop</a><br>Facebook 开源的iOS 动画库, 集合了很多动画效果</p><p>13、<a href="https://github.com/wezm/RegexKitLite" target="_blank" rel="noopener">RegexKitLite</a><br>用来处理正则表达式</p><p>14、<a href="https://github.com/rs/SDWebImage" target="_blank" rel="noopener">SDWebImage</a><br>常用于对从服务器端接受到的图片进行缓存, 是 UIImageView 的扩展, 应用起来比较简单</p><p>15、<a href="https://github.com/soffes/sskeychain" target="_blank" rel="noopener">SSKeychain</a><br>SSKeyChains对苹果安全框架API进行了简单封装,支持对存储在钥匙串中密码、账户进行访问,包括读取、删除和设置</p><p>16、<a href="https://github.com/TTTAttributedLabel/TTTAttributedLabel" target="_blank" rel="noopener">TTTAttributedLabel</a><br>UILabel 的替代品, 使 iOS 上的 Label 功能更加丰富, 可支持链接植入等功能</p><p>17、<a href="https://github.com/probablycorey/wax" target="_blank" rel="noopener">wax</a><br>Wax 就是使用 Lua 脚本语言来编写 ios原生应用 的一个框架,它把Lua脚本语言和原生 Objective-C 应用编程接口(API)结合起来</p><p>18、<a href="https://github.com/mattconnolly/ZipArchive" target="_blank" rel="noopener">ZipArchive</a><br>可用于压缩和解压缩文件</p><p>来源：<a href="http://m.163.com/special/newsclient/ios_libraries.html" target="_blank" rel="noopener">网易新闻的开源协议</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、&lt;a href=&quot;https://github.com/AFNetworking/AFNetworking&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AFNetworking&lt;/a&gt;&lt;br&gt;AFNetworking 采用 NSURLConnection + NSOperation, 主要方便与服务端 API 进行数据交换, 操作简单, 功能强大, 现在许多人都用它取代 ASIHTTPRequest&lt;br&gt;
    
    </summary>
    
      <category term="开发" scheme="http://tangjz.cc/categories/%E5%BC%80%E5%8F%91/"/>
    
      <category term="iOS" scheme="http://tangjz.cc/categories/%E5%BC%80%E5%8F%91/iOS/"/>
    
    
      <category term="iOS" scheme="http://tangjz.cc/tags/iOS/"/>
    
  </entry>
  
</feed>
